{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/src/showtimes/components/calendar.js\";\nimport React, { useEffect } from 'react';\nimport { addWeeks, subWeeks, addMonths, subMonths, startOfWeek, addDays, format, isSameMonth, isSameDay, endOfWeek, startOfMonth, endOfMonth, parse } from 'date-fns';\nimport './calendar.css';\nimport { useState } from 'react';\nimport ShowTime from '../ShowTime';\nimport { relativeTimeThreshold } from 'moment';\n\nclass Calendar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.newDate = new Date();\n    this.state = {\n      currentWeek: this.newDate,\n      currentMonth: this.newDate,\n      selectedDate: this.newDate,\n      currentYear: this.newDate.getFullYear(),\n      check: false\n    };\n\n    this.DateClick = (event, day) => {\n      this.setState({\n        selectedDate: {\n          day\n        }\n      });\n    };\n\n    this.nextMonth = () => {\n      this.setState({\n        currentWeek: addWeeks(this.state.currentWeek, 1),\n        currentMonth: addWeeks(endOfWeek(this.state.currentWeek), 1)\n      });\n    };\n\n    this.prevMonth = () => {\n      this.setState({\n        currentWeek: subWeeks(this.state.currentWeek, 1),\n        currentMonth: subWeeks(endOfWeek(this.state.currentWeek), 1)\n      });\n    };\n  }\n\n  renderHeader() {\n    const month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    return React.createElement(\"div\", {\n      className: \"header row flex-middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col col-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"icon\",\n      onClick: this.prevMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"chevron_left\")), React.createElement(\"div\", {\n      className: \"col col-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, month[this.state.currentMonth.getMonth()], \"  \", this.state.currentYear)), React.createElement(\"div\", {\n      className: \"col col-end\",\n      onClick: this.nextMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"chevron_right\")));\n  }\n\n  renderDays() {\n    const DAYS = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"];\n    let days = [];\n\n    for (let i = 0; i < 7; i++) {\n      days.push(React.createElement(\"div\", {\n        className: \"col col-center\",\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, DAYS[i]));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"days row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, days);\n  }\n\n  renderCells() {\n    const {\n      currentWeek\n    } = this.state;\n    const startDate = startOfWeek(currentWeek);\n    const endDate = endOfWeek(currentWeek);\n    const dateFormat = \"d\";\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = format(day, dateFormat);\n        let sameday = isSameDay(day, this.state.selectedDate) ? \"selected\" : \"\";\n        days.push(React.createElement(\"div\", {\n          className: `col cell ${sameday}`,\n          key: day,\n          onClick: () => this.setState({\n            selectedDate: this.day\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"number\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, formattedDate), React.createElement(\"span\", {\n          className: \"bg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, formattedDate)));\n        day = addDays(day, 1);\n      }\n\n      rows.push(React.createElement(\"div\", {\n        className: \"row\",\n        key: day,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, days));\n      days = [];\n    }\n\n    return React.createElement(\"div\", {\n      className: \"body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, rows);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"calendar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, this.renderHeader(), this.renderDays(), this.renderCells());\n  }\n\n}\n\nexport default Calendar;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/src/showtimes/components/calendar.js"],"names":["React","useEffect","addWeeks","subWeeks","addMonths","subMonths","startOfWeek","addDays","format","isSameMonth","isSameDay","endOfWeek","startOfMonth","endOfMonth","parse","useState","ShowTime","relativeTimeThreshold","Calendar","Component","newDate","Date","state","currentWeek","currentMonth","selectedDate","currentYear","getFullYear","check","DateClick","event","day","setState","nextMonth","prevMonth","renderHeader","month","getMonth","renderDays","DAYS","days","i","push","renderCells","startDate","endDate","dateFormat","rows","formattedDate","sameday","render"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport {addWeeks,subWeeks,addMonths,subMonths,startOfWeek,addDays,format,isSameMonth,isSameDay,endOfWeek,startOfMonth,endOfMonth,parse} from 'date-fns';\nimport './calendar.css';\nimport {useState}  from 'react';\nimport ShowTime from '../ShowTime';\nimport { relativeTimeThreshold } from 'moment';\n\n\nclass Calendar extends React.Component {\n newDate = new Date();\n\n  state = {\n    currentWeek: this.newDate,\n    currentMonth: this.newDate,\n    selectedDate: this.newDate,\n    currentYear:this.newDate.getFullYear(),\n    check:false\n  };\n\n  renderHeader() {\n    const month=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n    \n    return (\n      <div className=\"header row flex-middle\">\n        <div className=\"col col-start\">\n          <div className=\"icon\" onClick={this.prevMonth}>\n            chevron_left\n          </div>\n        </div>\n        <div className=\"col col-center\">\n    <span>{month[this.state.currentMonth.getMonth()]}  {this.state.currentYear}</span>\n        </div>\n        <div className=\"col col-end\" onClick={this.nextMonth}>\n          <div className=\"icon\">chevron_right</div>\n        </div>\n      </div>\n    );\n  }\n\n  renderDays() {\n    \n    const DAYS = [\"SUN\",\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\"];\n\n    let days=[];\n    for (let i = 0; i < 7; i++) {\n      days.push(\n        <div className=\"col col-center\" key={i}>\n          {DAYS[i]}\n        </div>\n      );\n    }\n\n    return <div className=\"days row\">{days}</div>;\n  }\n\n  renderCells() {\n    const { currentWeek} = this.state;\n  \n    const startDate = startOfWeek(currentWeek);\n    const endDate = endOfWeek(currentWeek);\n\n    const dateFormat = \"d\";\n    const rows = [];\n\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n    \n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = format(day, dateFormat);\n        let sameday = isSameDay(day, this.state.selectedDate)? \"selected\" : \"\";\n        \n        days.push(\n          <div         \n            className={`col cell ${sameday}`} \n            key={day} onClick={() =>this.setState({selectedDate:this.day})}\n            >\n            <span className=\"number\">{formattedDate}</span>\n            <span className=\"bg\">{formattedDate}</span>\n          </div>\n        );\n        day = addDays(day, 1);\n      }\n      rows.push(\n        <div className=\"row\" key={day}>\n          {days}\n        </div>\n      );\n      days = [];\n    }\n    return <div className=\"body\">{rows}</div>;\n  }\n  DateClick = (event,day) =>{\n    this.setState({\n      selectedDate: {day}\n    });\n    \n  };\n\n  \n  nextMonth = () => {\n     this.setState({\n     currentWeek: addWeeks(this.state.currentWeek,1),\n     currentMonth:addWeeks(endOfWeek(this.state.currentWeek),1)\n    });\n    \n  };\n\n  prevMonth = () => {\n    this.setState({\n      currentWeek: subWeeks(this.state.currentWeek,1),\n      currentMonth:subWeeks(endOfWeek(this.state.currentWeek),1)\n    });\n   \n  };\n\n  render() {\n    return (\n      <div className=\"calendar\">\n        {this.renderHeader()}\n        {this.renderDays()}\n        {this.renderCells()}\n      </div>\n    );\n  }\n}\n\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}