{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/frontend/src/movies/pages/Movies.js\";\nimport React, { useEffect, useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Pagination from '../../shared/components/UIElements/pagination';\n\nconst Movies = () => {\n  const [LoadedMovies, setLoadedMovies] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  const [currentPage, setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const currentPosts = LoadedMovies.slice(indexOfFirstPost, indexOfLastPosts);\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/movies`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedMovies(responseData.movies);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  }, []);\n\n  const errorHandler = () => {\n    setError = null;\n  };\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n\n  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), !isLoading && LoadedMovies && React.createElement(MovieList, {\n    items: currentPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }) && React.createElement(Pagination, {\n    postsPerPage: postsPerPage,\n    totalPosts: LoadedMovies.length,\n    paginate: paginate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n};\n\nexport default Movies;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/frontend/src/movies/pages/Movies.js"],"names":["React","useEffect","useState","MovieList","useHttpClient","LoadingSpinner","Pagination","Movies","LoadedMovies","setLoadedMovies","isLoading","setisLoading","error","setError","currentPage","setcurrentPage","postsPerPage","currentPosts","slice","indexOfFirstPost","indexOfLastPosts","fetchMovies","response","fetch","responseData","json","ok","Error","message","movies","err","errorHandler","paginate","pageNumber","length"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,UAAP,MAAuB,+CAAvB;;AACA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAK,CAACC,YAAD,EAAcC,eAAd,IAAiCP,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAK,CAACQ,SAAD,EAAWC,YAAX,IAA2BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAK,CAACU,KAAD,EAAOC,QAAP,IAAmBX,QAAQ,EAAhC;AACA,QAAK,CAACY,WAAD,EAAaC,cAAb,IAA+Bb,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMc,YAAY,GAAG,EAArB;AACA,QAAMC,YAAY,GAAGT,YAAY,CAACU,KAAb,CAAmBC,gBAAnB,EAAoCC,gBAApC,CAArB;AACAnB,EAAAA,SAAS,CAAC,MAAI;AAEZ,UAAMoB,WAAW,GAAG,YAAS;AAC3BV,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACD,cAAMW,QAAQ,GAAE,MAAMC,KAAK,CAAE,kCAAF,CAA3B;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AACA,YAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AACd,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AACDnB,QAAAA,eAAe,CAACe,YAAY,CAACK,MAAd,CAAf;AAED,OARD,CAQE,OAAOC,GAAP,EAAY;AACZjB,QAAAA,QAAQ,CAACiB,GAAG,CAACF,OAAL,CAAR;AACD;;AACDjB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAdD;;AAgBAU,IAAAA,WAAW;AACZ,GAnBQ,EAmBP,EAnBO,CAAT;;AAoBA,QAAMU,YAAY,GAAG,MAAK;AACxBlB,IAAAA,QAAQ,GAAE,IAAV;AACD,GAFD;;AAGC,QAAMO,gBAAgB,GAAGN,WAAW,GAAGE,YAAvC;AACA,QAAMG,gBAAgB,GAAGC,gBAAgB,GAAGJ,YAA5C;;AAEA,QAAMgB,QAAQ,GAAGC,UAAU,IAAIlB,cAAc,CAACkB,UAAD,CAA7C;;AAID,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCvB,SAAS,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,CADf,EAEC,CAACA,SAAD,IAAcF,YAAd,IAA4B,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAES,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA5B,IAA+D,oBAAC,UAAD;AAAY,IAAA,YAAY,EAAID,YAA5B;AAA0C,IAAA,UAAU,EAAER,YAAY,CAAC0B,MAAnE;AAA2E,IAAA,QAAQ,EAAEF,QAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFhE,CADF;AAMC,CA3CH;;AA6CA,eAAezB,MAAf","sourcesContent":["\nimport React, { useEffect,useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Pagination from '../../shared/components/UIElements/pagination';\nconst Movies = () => {\n  const[LoadedMovies,setLoadedMovies] = useState([]);\n  const[isLoading,setisLoading] = useState(false);\n  const[error,setError] = useState();\n  const[currentPage,setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const currentPosts = LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts);\n  useEffect(()=>{\n\n    const fetchMovies = async()=>{\n      setisLoading(true);\n      try{          \n        const response= await fetch(`http://localhost:5000/api/movies`); \n        const responseData = await response.json();\n        if(!response.ok){\n          throw new Error(responseData.message);\n        }\n        setLoadedMovies(responseData.movies);\n        \n      } catch (err) {\n        setError(err.message);\n      }\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  },[]);\n  const errorHandler = () =>{\n    setError=(null);\n  }\n   const indexOfLastPosts = currentPage * postsPerPage;\n   const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n\n   const paginate = pageNumber => setcurrentPage(pageNumber);\n  \n\n\n  return(       \n    <React.Fragment>\n    {isLoading && (<div><LoadingSpinner /></div>)}\n    {!isLoading && LoadedMovies&&<MovieList items={currentPosts}/>&&<Pagination postsPerPage = {postsPerPage} totalPosts={LoadedMovies.length} paginate={paginate}/>}\n    \n    </React.Fragment>)\n  };\n\nexport default Movies;\n\n\n\n          \n\n\n\n"]},"metadata":{},"sourceType":"module"}