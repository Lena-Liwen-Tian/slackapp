{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/intern/slackapp/src/performance/pages/Performance.js\";\nimport React, { useEffect, useState } from 'react';\nimport PerformanceList from '../components/PerformanceList';\nimport Calculate from '../components/Calculate';\n\nconst Performance = () => {\n  const [LoadedPeformance, setLoadedPerformance] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState(); // const[currentPage,setcurrentPage] = useState(1);\n  // const postsPerPage = 20;\n  // const [currentPosts,setcurrentPosts] = useState([]);\n\n  useEffect(() => {\n    const fetchPerformance = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`https://slack-app-ironroots-new.herokuapp.com/api/data`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedPerformance(responseData.data);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchPerformance();\n  }, []); // const indexOfLastPosts = currentPage * postsPerPage;\n  //  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n  //  const paginate = pageNumber => setcurrentPage(pageNumber);\n  // useEffect(()=>{\n  //   const updatePosts=()=>{\n  //   setcurrentPosts(LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts))};\n  //   updatePosts()},[LoadedMovies,currentPage,PaginationPage]);\n  // const errorHandler = () =>{\n  //   setError=(null);\n  // }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, !isLoading && React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), !isLoading && React.createElement(Calculate, {\n    items: LoadedPeformance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), !isLoading && React.createElement(PerformanceList, {\n    items: LoadedPeformance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }));\n};\n\nexport default Performance;","map":{"version":3,"sources":["/Users/liwentian/Desktop/intern/slackapp/src/performance/pages/Performance.js"],"names":["React","useEffect","useState","PerformanceList","Calculate","Performance","LoadedPeformance","setLoadedPerformance","isLoading","setisLoading","error","setError","fetchPerformance","response","fetch","responseData","json","ok","Error","message","data","err"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AACA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAK,CAACC,gBAAD,EAAkBC,oBAAlB,IAA0CL,QAAQ,CAAC,EAAD,CAAvD;AACA,QAAK,CAACM,SAAD,EAAWC,YAAX,IAA2BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAK,CAACQ,KAAD,EAAOC,QAAP,IAAmBT,QAAQ,EAAhC,CAHwB,CAIxB;AACA;AACA;;AAEAD,EAAAA,SAAS,CAAC,MAAI;AAEZ,UAAMW,gBAAgB,GAAG,YAAS;AAChCH,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACD,cAAMI,QAAQ,GAAE,MAAMC,KAAK,CAAE,wDAAF,CAA3B;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AACA,YAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AAEd,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AACDZ,QAAAA,oBAAoB,CAACQ,YAAY,CAACK,IAAd,CAApB;AAED,OATD,CASE,OAAOC,GAAP,EAAY;AACZV,QAAAA,QAAQ,CAACU,GAAG,CAACF,OAAL,CAAR;AACD;;AACDV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAfD;;AAiBAG,IAAAA,gBAAgB;AACjB,GApBQ,EAoBP,EApBO,CAAT,CARwB,CA8BxB;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAKA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,CAACJ,SAAD,IAAc,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHhB,EAIE,CAACA,SAAD,IAAc,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEF,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJhB,EAKE,CAACE,SAAD,IAAc,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAEF,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALhB,CADF;AAOqB,CArDvB;;AAwDA,eAAeD,WAAf","sourcesContent":["\nimport React, { useEffect,useState } from 'react';\nimport PerformanceList from '../components/PerformanceList';\nimport Calculate from '../components/Calculate';\nconst Performance = () => {\n  const[LoadedPeformance,setLoadedPerformance] = useState([]);\n  const[isLoading,setisLoading] = useState(false);\n  const[error,setError] = useState();\n  // const[currentPage,setcurrentPage] = useState(1);\n  // const postsPerPage = 20;\n  // const [currentPosts,setcurrentPosts] = useState([]);\n\n  useEffect(()=>{\n\n    const fetchPerformance = async()=>{\n      setisLoading(true);\n      try{          \n        const response= await fetch(`https://slack-app-ironroots-new.herokuapp.com/api/data`); \n        const responseData = await response.json();\n        if(!response.ok){\n    \n          throw new Error(responseData.message);\n        }\n        setLoadedPerformance(responseData.data);\n \n      } catch (err) {\n        setError(err.message);\n      }\n      setisLoading(false);\n    };\n\n    fetchPerformance();\n  },[]);\n\n  // const indexOfLastPosts = currentPage * postsPerPage;\n  //  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n  //  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  // useEffect(()=>{\n  //   const updatePosts=()=>{\n  //   setcurrentPosts(LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts))};\n  //   updatePosts()},[LoadedMovies,currentPage,PaginationPage]);\n\n  // const errorHandler = () =>{\n  //   setError=(null);\n  // }\n   \n  \n\n\n  return(       \n    <React.Fragment>\n     {/* <PaginationPage postsPerPage={postsPerPage} totalPosts={LoadedMovies.length} paginate={paginate}/> */}\n     {/* isLoading && <div><LoadingSpinner /></div>) */}\n     {!isLoading && <Title />}\n     {!isLoading && <Calculate items={LoadedPeformance}/>}\n     {!isLoading && <PerformanceList items={LoadedPeformance}/>}\n    </React.Fragment>)}\n\n\nexport default Performance;\n\n\n\n          \n\n\n\n"]},"metadata":{},"sourceType":"module"}