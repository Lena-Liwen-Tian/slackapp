{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/frontend/src/movies/pages/Description.js\";\nimport { React, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport MovieDescription from './MovieDescription';\n\nconst Description = () => {\n  const movieId = useParams().movieId;\n  const [LoadedDescription, setLoadedDescription] = useState();\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  useEffect(() => {\n    const fetchDescription = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/movies/${movieId}`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedDescription(responseData.movie);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchDescription();\n  }, [movieId]);\n\n  const errorHandler = () => {\n    setError = null;\n  };\n\n  return;\n  React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })), !isLoading && LoadedShowtimes && React.createElement(MovieDescription, {\n    name: LoadedDescription.Title,\n    image: LoadedDescription.Poster,\n    length: LoadedDescription.Runtime,\n    rating: LoadedDescription.Rated,\n    genre: LoadedDescription.Genre,\n    description: LoadedDescription.Plot,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n};\n\nexport default Description;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/frontend/src/movies/pages/Description.js"],"names":["React","useState","useEffect","useParams","Button","Card","MovieDescription","Description","movieId","LoadedDescription","setLoadedDescription","isLoading","setisLoading","error","setError","fetchDescription","response","fetch","responseData","json","ok","Error","message","movie","err","errorHandler","LoadedShowtimes","Title","Poster","Runtime","Rated","Genre","Plot"],"mappings":";AAAA,SAAQA,KAAR,EAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AAEA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,OAAOC,gBAAP,MAA4B,oBAA5B;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,OAAO,GAAGL,SAAS,GAAGK,OAA5B;AACA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CT,QAAQ,EAA1D;AACA,QAAM,CAACU,SAAD,EAAWC,YAAX,IAA2BX,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,EAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACjB,UAAMa,gBAAgB,GAAG,YAAY;AACpCH,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAG;AACD,cAAMI,QAAQ,GAAE,MAAMC,KAAK,CAAE,oCAAmCT,OAAQ,EAA7C,CAA3B;AACA,cAAMU,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AACA,YAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AACd,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AACDZ,QAAAA,oBAAoB,CAACQ,YAAY,CAACK,KAAd,CAApB;AAED,OARD,CAQE,OAAOC,GAAP,EAAY;AACZV,QAAAA,QAAQ,CAACU,GAAG,CAACF,OAAL,CAAR;AACD;;AACDV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAfA;;AAiBDG,IAAAA,gBAAgB;AACf,GAnBU,EAmBT,CAACP,OAAD,CAnBS,CAAT;;AAqBF,QAAMiB,YAAY,GAAG,MAAK;AAC1BX,IAAAA,QAAQ,GAAE,IAAV;AACC,GAFD;;AAKE;AACA,sBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,SAAS,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACjB,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADiB,CADjB,EAID,CAACA,SAAD,IAAce,eAAd,IAAgC,oBAAC,gBAAD;AAC/B,IAAA,IAAI,EAAIjB,iBAAiB,CAACkB,KADK;AAE/B,IAAA,KAAK,EAAElB,iBAAiB,CAACmB,MAFM;AAG/B,IAAA,MAAM,EAAInB,iBAAiB,CAACoB,OAHG;AAI/B,IAAA,MAAM,EAAEpB,iBAAiB,CAACqB,KAJK;AAK/B,IAAA,KAAK,EAAErB,iBAAiB,CAACsB,KALM;AAM/B,IAAA,WAAW,EAAEtB,iBAAiB,CAACuB,IANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJ/B;AAaD,CA9CD;;AAiDA,eAAezB,WAAf","sourcesContent":["import {React,useState,useEffect} from 'react';\n\nimport { useParams } from 'react-router-dom';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport MovieDescription from'./MovieDescription';\n\nconst Description = () => {   \n  const movieId = useParams().movieId;\n  const [LoadedDescription, setLoadedDescription] = useState();\n  const [isLoading,setisLoading] = useState(false);\n  const [error, setError] = useState();\n\n  useEffect(() => {\n const fetchDescription = async () => {\n  setisLoading(true);\n\n  try{          \n    const response= await fetch(`http://localhost:5000/api/movies/${movieId}`); \n    const responseData = await response.json();\n    if(!response.ok){\n      throw new Error(responseData.message);\n    }\n    setLoadedDescription(responseData.movie);\n    \n  } catch (err) {\n    setError(err.message);\n  }\n  setisLoading(false);\n};\n\nfetchDescription();\n},[movieId]);\n\nconst errorHandler = () =>{\nsetError=(null);\n}\n\n\n  return \n  <React.Fragment>\n    {isLoading && (<div>\n  <LoadingSpinner />\n</div>)}  \n{!isLoading && LoadedShowtimes &&<MovieDescription \n  name = {LoadedDescription.Title} \n  image={LoadedDescription.Poster}\n  length = {LoadedDescription.Runtime}\n  rating={LoadedDescription.Rated}\n  genre={LoadedDescription.Genre}\n  description={LoadedDescription.Plot}/>}\n  </React.Fragment>\n\n};\n\n\nexport default Description;"]},"metadata":{},"sourceType":"module"}