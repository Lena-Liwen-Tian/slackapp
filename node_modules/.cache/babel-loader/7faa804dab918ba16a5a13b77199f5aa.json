{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Dropbox/PumpkinMovie1/frontend/src/movies/pages/Movies.js\";\nimport React, { useEffect, useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\n\nconst Movies = () => {\n  const [LoadedMovies, setLoadedMovies] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  const [currentPage, setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts, setcurrentPosts] = useState([]);\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(process.env.REACT_APP_BACKEND_URL + `/movies`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedMovies(responseData.movies);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  }, []);\n  const indexOfLastPosts = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n\n  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  useEffect(() => {\n    const updatePosts = () => {\n      setcurrentPosts(LoadedMovies.slice(indexOfFirstPost, indexOfLastPosts));\n    };\n\n    updatePosts();\n  }, [LoadedMovies, currentPage, PaginationPage]);\n\n  const errorHandler = () => {\n    setError = null;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(PaginationPage, {\n    postsPerPage: postsPerPage,\n    totalPosts: LoadedMovies.length,\n    paginate: paginate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })), !isLoading && LoadedMovies && React.createElement(MovieList, {\n    items: currentPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }));\n};\n\nexport default Movies;","map":{"version":3,"sources":["/Users/liwentian/Dropbox/PumpkinMovie1/frontend/src/movies/pages/Movies.js"],"names":["React","useEffect","useState","MovieList","useHttpClient","LoadingSpinner","PaginationPage","Movies","LoadedMovies","setLoadedMovies","isLoading","setisLoading","error","setError","currentPage","setcurrentPage","postsPerPage","currentPosts","setcurrentPosts","fetchMovies","response","fetch","process","env","REACT_APP_BACKEND_URL","responseData","json","ok","Error","message","movies","err","indexOfLastPosts","indexOfFirstPost","paginate","pageNumber","updatePosts","slice","errorHandler","length"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,cAAP,MAA2B,+CAA3B;;AACA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAK,CAACC,YAAD,EAAcC,eAAd,IAAiCP,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAK,CAACQ,SAAD,EAAWC,YAAX,IAA2BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAK,CAACU,KAAD,EAAOC,QAAP,IAAmBX,QAAQ,EAAhC;AACA,QAAK,CAACY,WAAD,EAAaC,cAAb,IAA+Bb,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMc,YAAY,GAAG,EAArB;AACA,QAAM,CAACC,YAAD,EAAcC,eAAd,IAAiChB,QAAQ,CAAC,EAAD,CAA/C;AAEAD,EAAAA,SAAS,CAAC,MAAI;AAEZ,UAAMkB,WAAW,GAAG,YAAS;AAC3BR,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACD,cAAMS,QAAQ,GAAE,MAAMC,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAmC,SAApC,CAA3B;AACA,cAAMC,YAAY,GAAG,MAAML,QAAQ,CAACM,IAAT,EAA3B;;AACA,YAAG,CAACN,QAAQ,CAACO,EAAb,EAAgB;AAEd,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AACDpB,QAAAA,eAAe,CAACgB,YAAY,CAACK,MAAd,CAAf;AACD,OARD,CAQE,OAAOC,GAAP,EAAY;AACZlB,QAAAA,QAAQ,CAACkB,GAAG,CAACF,OAAL,CAAR;AACD;;AACDlB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAdD;;AAgBAQ,IAAAA,WAAW;AACZ,GAnBQ,EAmBP,EAnBO,CAAT;AAqBA,QAAMa,gBAAgB,GAAGlB,WAAW,GAAGE,YAAvC;AACC,QAAMiB,gBAAgB,GAAGD,gBAAgB,GAAGhB,YAA5C;;AACA,QAAMkB,QAAQ,GAAGC,UAAU,IAAIpB,cAAc,CAACoB,UAAD,CAA7C;;AAEDlC,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMmC,WAAW,GAAC,MAAI;AACtBlB,MAAAA,eAAe,CAACV,YAAY,CAAC6B,KAAb,CAAmBJ,gBAAnB,EAAoCD,gBAApC,CAAD,CAAf;AAAuE,KADvE;;AAEAI,IAAAA,WAAW;AAAG,GAHP,EAGQ,CAAC5B,YAAD,EAAcM,WAAd,EAA0BR,cAA1B,CAHR,CAAT;;AAKA,QAAMgC,YAAY,GAAG,MAAK;AACxBzB,IAAAA,QAAQ,GAAE,IAAV;AACD,GAFD;;AAOA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,cAAD;AAAgB,IAAA,YAAY,EAAEG,YAA9B;AAA4C,IAAA,UAAU,EAAER,YAAY,CAAC+B,MAArE;AAA6E,IAAA,QAAQ,EAAEL,QAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAECxB,SAAS,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,CAFf,EAGC,CAACA,SAAD,IAAcF,YAAd,IAA4B,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAES,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAH7B,CADF;AAMC,CAnDH;;AAqDA,eAAeV,MAAf","sourcesContent":["\nimport React, { useEffect,useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport PaginationPage from '../../shared/components/UIElements/pagination';\nconst Movies = () => {\n  const[LoadedMovies,setLoadedMovies] = useState([]);\n  const[isLoading,setisLoading] = useState(false);\n  const[error,setError] = useState();\n  const[currentPage,setcurrentPage] = useState(1);\n  const postsPerPage = 20;\n  const [currentPosts,setcurrentPosts] = useState([]);\n\n  useEffect(()=>{\n\n    const fetchMovies = async()=>{\n      setisLoading(true);\n      try{          \n        const response= await fetch(process.env.REACT_APP_BACKEND_URL+`/movies`); \n        const responseData = await response.json();\n        if(!response.ok){\n    \n          throw new Error(responseData.message);\n        }\n        setLoadedMovies(responseData.movies);\n      } catch (err) {\n        setError(err.message);\n      }\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  },[]);\n\n  const indexOfLastPosts = currentPage * postsPerPage;\n   const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n   const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  useEffect(()=>{\n    const updatePosts=()=>{\n    setcurrentPosts(LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts))};\n    updatePosts()},[LoadedMovies,currentPage,PaginationPage]);\n\n  const errorHandler = () =>{\n    setError=(null);\n  }\n   \n  \n\n\n  return(       \n    <React.Fragment>\n    <PaginationPage postsPerPage={postsPerPage} totalPosts={LoadedMovies.length} paginate={paginate}/>\n    {isLoading && (<div><LoadingSpinner /></div>)}\n    {!isLoading && LoadedMovies&&<MovieList items={currentPosts}/>} \n    </React.Fragment>)\n  };\n\nexport default Movies;\n\n\n\n          \n\n\n\n"]},"metadata":{},"sourceType":"module"}