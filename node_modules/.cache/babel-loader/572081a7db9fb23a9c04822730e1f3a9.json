{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/frontend/src/movies/pages/Movies.js\";\nimport React, { useEffect, useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Pagination from '../../shared/components/UIElements/pagination';\n\nconst Movies = () => {\n  const [Posts, setPosts] = useState([]);\n  const [LoadedMovies, setLoadedMovies] = useState();\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  const [postsPerPage] = useState(20);\n  const [currentPage, setcurrentPage] = useState(1);\n  const indexOfLastPosts = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n  const currentPosts = LoadedMovies.slice(indexOfFirstPost, indexOfLastPosts);\n\n  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/movies`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedMovies(responseData.movies);\n        indexOfLastPosts = currentPage * postsPerPage;\n        indexOfFirstPost = indexOfLastPosts - postsPerPage;\n        const currentPosts = LoadedMovies.slice(indexOfFirstPost, indexOfLastPosts);\n\n        const paginate = pageNumber => setcurrentPage(pageNumber);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  }, []);\n\n  const errorHandler = () => {\n    setError = null;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })), !isLoading && LoadedMovies && React.createElement(MovieList, {\n    items: currentPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }) && React.createElement(Pagination, {\n    postsPerPage: postsPerPage,\n    totalPosts: LoadedMovies.length,\n    paginate: paginate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }));\n};\n\nexport default Movies;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/frontend/src/movies/pages/Movies.js"],"names":["React","useEffect","useState","MovieList","useHttpClient","LoadingSpinner","Pagination","Movies","Posts","setPosts","LoadedMovies","setLoadedMovies","isLoading","setisLoading","error","setError","postsPerPage","currentPage","setcurrentPage","indexOfLastPosts","indexOfFirstPost","currentPosts","slice","paginate","pageNumber","fetchMovies","response","fetch","responseData","json","ok","Error","message","movies","err","errorHandler","length"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,UAAP,MAAuB,+CAAvB;;AACA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAK,CAACC,KAAD,EAAOC,QAAP,IAAmBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAK,CAACQ,YAAD,EAAcC,eAAd,IAAiCT,QAAQ,EAA9C;AACA,QAAK,CAACU,SAAD,EAAWC,YAAX,IAA2BX,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAK,CAACY,KAAD,EAAOC,QAAP,IAAmBb,QAAQ,EAAhC;AACA,QAAK,CAACc,YAAD,IAAiBd,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAK,CAACe,WAAD,EAAaC,cAAb,IAA+BhB,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMiB,gBAAgB,GAAGF,WAAW,GAAGD,YAAvC;AACA,QAAMI,gBAAgB,GAAGD,gBAAgB,GAAGH,YAA5C;AAEA,QAAMK,YAAY,GAAGX,YAAY,CAACY,KAAb,CAAmBF,gBAAnB,EAAoCD,gBAApC,CAArB;;AACA,QAAMI,QAAQ,GAAGC,UAAU,IAAIN,cAAc,CAACM,UAAD,CAA7C;;AAEAvB,EAAAA,SAAS,CAAC,MAAI;AAEZ,UAAMwB,WAAW,GAAG,YAAS;AAC3BZ,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACD,cAAMa,QAAQ,GAAE,MAAMC,KAAK,CAAE,kCAAF,CAA3B;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AACA,YAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AACd,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AACDrB,QAAAA,eAAe,CAACiB,YAAY,CAACK,MAAd,CAAf;AACAd,QAAAA,gBAAgB,GAAGF,WAAW,GAAGD,YAAjC;AACAI,QAAAA,gBAAgB,GAAGD,gBAAgB,GAAGH,YAAtC;AAEN,cAAMK,YAAY,GAAGX,YAAY,CAACY,KAAb,CAAmBF,gBAAnB,EAAoCD,gBAApC,CAArB;;AACA,cAAMI,QAAQ,GAAGC,UAAU,IAAIN,cAAc,CAACM,UAAD,CAA7C;AAEK,OAbD,CAaE,OAAOU,GAAP,EAAY;AACZnB,QAAAA,QAAQ,CAACmB,GAAG,CAACF,OAAL,CAAR;AACD;;AACDnB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAnBD;;AAqBAY,IAAAA,WAAW;AACZ,GAxBQ,EAwBP,EAxBO,CAAT;;AAyBA,QAAMU,YAAY,GAAG,MAAK;AACxBpB,IAAAA,QAAQ,GAAE,IAAV;AACD,GAFD;;AAKA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCH,SAAS,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,CADf,EAEC,CAACA,SAAD,IAAcF,YAAd,IAA8B,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEW,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA9B,IAAiE,oBAAC,UAAD;AAAY,IAAA,YAAY,EAAIL,YAA5B;AAA0C,IAAA,UAAU,EAAEN,YAAY,CAAC0B,MAAnE;AAA2E,IAAA,QAAQ,EAAEb,QAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFlE,CADF;AAMC,CAjDH;;AAmDA,eAAehB,MAAf","sourcesContent":["\nimport React, { useEffect,useState } from 'react';\nimport MovieList from '../components/MovieList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Pagination from '../../shared/components/UIElements/pagination';\nconst Movies = () => {\n  const[Posts,setPosts] = useState([]);\n  const[LoadedMovies,setLoadedMovies] = useState();\n  const[isLoading,setisLoading] = useState(false);\n  const[error,setError] = useState();\n  const[postsPerPage] = useState(20);\n  const[currentPage,setcurrentPage] = useState(1);\n  const indexOfLastPosts = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n\n  const currentPosts = LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts);\n  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  useEffect(()=>{\n\n    const fetchMovies = async()=>{\n      setisLoading(true);\n      try{          \n        const response= await fetch(`http://localhost:5000/api/movies`); \n        const responseData = await response.json();\n        if(!response.ok){\n          throw new Error(responseData.message);\n        }\n        setLoadedMovies(responseData.movies);\n        indexOfLastPosts = currentPage * postsPerPage;\n        indexOfFirstPost = indexOfLastPosts - postsPerPage;\n\n  const currentPosts = LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts);\n  const paginate = pageNumber => setcurrentPage(pageNumber);\n        \n      } catch (err) {\n        setError(err.message);\n      }\n      setisLoading(false);\n    };\n\n    fetchMovies();\n  },[]);\n  const errorHandler = () =>{\n    setError=(null);\n  }\n  \n  \n  return(       \n    <React.Fragment>\n    {isLoading && (<div><LoadingSpinner /></div>)}\n    {!isLoading && LoadedMovies && <MovieList items={currentPosts}/>&&<Pagination postsPerPage = {postsPerPage} totalPosts={LoadedMovies.length} paginate={paginate} />}\n    \n    </React.Fragment>)\n  };\n\nexport default Movies;\n\n\n\n          \n\n\n\n"]},"metadata":{},"sourceType":"module"}