{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/intern/slackapp/src/performance/components/Calculate.js\";\nimport React from 'react';\nimport PerformanceItem from './PerformanceItem';\nimport { differenceInCalendarMonths } from 'date-fns';\n\nconst Calculate = props => {\n  let dict = {};\n  var last = new Date(new Date().getTime() - (4 * 24 * 60 * 60 * 1000 + 11 * 60 * 60 * 1000));\n  props.items.map(item => {\n    if (!dict.hasOwnProperty(item.userid)) {\n      dict[item.userid] = {\n        \"name\": item.name,\n        \"away\": [],\n        \"active\": []\n      };\n    } //date has to be in range 5 days\n\n\n    var datetime = item.time;\n    var d = new Date(datetime); // console.log(cur);\n    // console.log(last);\n\n    console.log(d);\n\n    if (d.getTime() >= last.getTime()) {\n      // console.log(d);\n      //compare the first active and the first away\n      //active < away ->  away - active\n      //active > away -> away - start + (one more away - start) \n      if (item.status == \"away\") {\n        dict[item.userid].away.push(d);\n      } else if (item.status == \"active\") {\n        dict[item.userid].active.push(d);\n      }\n    }\n  }); //go through the dict again and calculate the total time\n\n  Object.keys(dict).forEach(function (key) {\n    var away = dict[key].away;\n    var active = dict[key].active;\n  });\n  console.log(dict);\n  return Object.entries(dict).map(([key, value]) => React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, key, \" \", value.name, \": \"));\n};\n\nexport default Calculate;","map":{"version":3,"sources":["/Users/liwentian/Desktop/intern/slackapp/src/performance/components/Calculate.js"],"names":["React","PerformanceItem","differenceInCalendarMonths","Calculate","props","dict","last","Date","getTime","items","map","item","hasOwnProperty","userid","name","datetime","time","d","console","log","status","away","push","active","Object","keys","forEach","key","entries","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,0BAAT,QAA2C,UAA3C;;AAIA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACvB,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,MAAwB,IAAI,EAAJ,GAAS,EAAT,GAAc,EAAd,GAAmB,IAAnB,GAA0B,KAAK,EAAL,GAAU,EAAV,GAAe,IAAjE,CAAT,CAAX;AACAJ,EAAAA,KAAK,CAACK,KAAN,CAAYC,GAAZ,CAAgBC,IAAI,IAAE;AAClB,QAAG,CAACN,IAAI,CAACO,cAAL,CAAoBD,IAAI,CAACE,MAAzB,CAAJ,EAAqC;AACjCR,MAAAA,IAAI,CAACM,IAAI,CAACE,MAAN,CAAJ,GAAoB;AAAC,gBAAOF,IAAI,CAACG,IAAb;AAAkB,gBAAO,EAAzB;AAA4B,kBAAS;AAArC,OAApB;AACH,KAHiB,CAKlB;;;AAEA,QAAIC,QAAQ,GAAGJ,IAAI,CAACK,IAApB;AAEA,QAAIC,CAAC,GAAG,IAAIV,IAAJ,CAASQ,QAAT,CAAR,CATkB,CAWlB;AAEA;;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;;AACA,QAAGA,CAAC,CAACT,OAAF,MAAeF,IAAI,CAACE,OAAL,EAAlB,EAAiC;AAC7B;AACA;AACA;AACA;AACA,UAAGG,IAAI,CAACS,MAAL,IAAe,MAAlB,EAAyB;AACrBf,QAAAA,IAAI,CAACM,IAAI,CAACE,MAAN,CAAJ,CAAkBQ,IAAlB,CAAuBC,IAAvB,CAA4BL,CAA5B;AACH,OAFD,MAEM,IAAGN,IAAI,CAACS,MAAL,IAAe,QAAlB,EAA2B;AAC7Bf,QAAAA,IAAI,CAACM,IAAI,CAACE,MAAN,CAAJ,CAAkBU,MAAlB,CAAyBD,IAAzB,CAA8BL,CAA9B;AACH;AACJ;AAGJ,GA5BD,EAHuB,CAgCvB;;AACAO,EAAAA,MAAM,CAACC,IAAP,CAAYpB,IAAZ,EAAkBqB,OAAlB,CAA0B,UAASC,GAAT,EAAc;AACpC,QAAIN,IAAI,GAAGhB,IAAI,CAACsB,GAAD,CAAJ,CAAUN,IAArB;AACA,QAAIE,MAAM,GAAGlB,IAAI,CAACsB,GAAD,CAAJ,CAAUJ,MAAvB;AAEH,GAJD;AAKAL,EAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AAGF,SACEmB,MAAM,CAACI,OAAP,CAAevB,IAAf,EACCK,GADD,CACM,CAAC,CAACiB,GAAD,EAAME,KAAN,CAAD,KAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,GAAJ,OAAUE,KAAK,CAACf,IAAhB,OADxB,CADF;AAID,CA7CD;;AA+CA,eAAeX,SAAf","sourcesContent":["import React from 'react';\n\nimport PerformanceItem from './PerformanceItem';\nimport { differenceInCalendarMonths } from 'date-fns';\n\n\n\nconst Calculate = props => {\n    let dict = {};\n    var last = new Date(new Date().getTime() - (4 * 24 * 60 * 60 * 1000 + 11 * 60 * 60 * 1000));\n    props.items.map(item=>{\n        if(!dict.hasOwnProperty(item.userid)){\n            dict[item.userid] = {\"name\":item.name,\"away\":[],\"active\":[]};\n        }\n        \n        //date has to be in range 5 days\n\n        var datetime = item.time;\n\n        var d = new Date(datetime);\n       \n        // console.log(cur);\n       \n        // console.log(last);\n        console.log(d);\n        if(d.getTime() >= last.getTime()){\n            // console.log(d);\n            //compare the first active and the first away\n            //active < away ->  away - active\n            //active > away -> away - start + (one more away - start) \n            if(item.status == \"away\"){\n                dict[item.userid].away.push(d);\n            }else if(item.status == \"active\"){\n                dict[item.userid].active.push(d);\n            }\n        }\n      \n       \n    })\n    //go through the dict again and calculate the total time\n    Object.keys(dict).forEach(function(key) {\n        var away = dict[key].away;\n        var active = dict[key].active;\n\n    });\n    console.log(dict);\n\n    \n  return (\n    Object.entries(dict)\n    .map( ([key, value]) => <p>{key} {value.name}: </p> )\n  )\n};\n\nexport default Calculate;\n"]},"metadata":{},"sourceType":"module"}