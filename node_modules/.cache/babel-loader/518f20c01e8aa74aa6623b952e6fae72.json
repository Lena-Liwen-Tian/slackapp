{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/frontend/src/places/components/Singleplace.js\";\nimport { useParams } from 'react-router-dom';\nimport React, { useState, useEffect } from 'react';\nimport SingleplaceItem from './SingleplaceItem';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\n\nconst Singleplace = props => {\n  const theaterId = useParams().theaterId;\n  const [LoadedTheatre, setLoadedTheatre] = useState();\n  const [LoadedMovies, setLoadedMovies] = useState();\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  useEffect(() => {\n    const fetchTheatre = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/theatres/${theaterId}`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedTheatre(responseData.cinema);\n        setLoadedMovies(responseData.movies);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchTheatre();\n  }, [theaterId]);\n\n  const errorHandler = () => {\n    setError = null;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), !isLoading && LoadedTheatre && React.createElement(SingleplaceItem, {\n    name: LoadedTheatre.cinema_name,\n    image: LoadedTheatre.image,\n    address: LoadedTheatre.address,\n    lat: LoadedTheatre.lat,\n    lng: LoadedTheatre.lng,\n    movies: LoadedMovies,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n};\n\nexport default Singleplace;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/frontend/src/places/components/Singleplace.js"],"names":["useParams","React","useState","useEffect","SingleplaceItem","useHttpClient","LoadingSpinner","Button","Card","Singleplace","props","theaterId","LoadedTheatre","setLoadedTheatre","LoadedMovies","setLoadedMovies","isLoading","setisLoading","error","setError","fetchTheatre","response","fetch","responseData","json","ok","Error","message","cinema","movies","err","errorHandler","cinema_name","image","address","lat","lng"],"mappings":";AAAA,SAASA,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,OAAOC,IAAP,MAAiB,yCAAjB;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAMC,SAAS,GAAGX,SAAS,GAAGW,SAA9B;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,EAAlD;AACA,QAAM,CAACY,YAAD,EAAcC,eAAd,IAAiCb,QAAQ,EAA/C;AACA,QAAM,CAACc,SAAD,EAAWC,YAAX,IAA2Bf,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,EAAlC;AACEC,EAAAA,SAAS,CAAC,MAAM;AACb,UAAMiB,YAAY,GAAG,YAAY;AAChCH,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACD,cAAMI,QAAQ,GAAE,MAAMC,KAAK,CAAE,sCAAqCX,SAAU,EAAjD,CAA3B;AACA,cAAMY,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AACA,YAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AACd,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AACDd,QAAAA,gBAAgB,CAACU,YAAY,CAACK,MAAd,CAAhB;AACAb,QAAAA,eAAe,CAACQ,YAAY,CAACM,MAAd,CAAf;AACD,OARD,CAQE,OAAOC,GAAP,EAAY;AACZX,QAAAA,QAAQ,CAACW,GAAG,CAACH,OAAL,CAAR;AACD;;AACDV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAdA;;AAgBDG,IAAAA,YAAY;AACb,GAlBQ,EAkBP,CAACT,SAAD,CAlBO,CAAT;;AAmBA,QAAMoB,YAAY,GAAG,MAAK;AACxBZ,IAAAA,QAAQ,GAAE,IAAV;AACD,GAFD;;AAIA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCH,SAAS,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,CADf,EAEC,CAACA,SAAD,IAAcJ,aAAd,IAA+B,oBAAC,eAAD;AACpC,IAAA,IAAI,EAAIA,aAAa,CAACoB,WADc;AAEpC,IAAA,KAAK,EAAEpB,aAAa,CAACqB,KAFe;AAGpC,IAAA,OAAO,EAAIrB,aAAa,CAACsB,OAHW;AAIpC,IAAA,GAAG,EAAItB,aAAa,CAACuB,GAJe;AAKpC,IAAA,GAAG,EAAIvB,aAAa,CAACwB,GALe;AAMpC,IAAA,MAAM,EAAItB,YAN0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFhC,CADF;AAYD,CAzCH;;AA4CA,eAAeL,WAAf","sourcesContent":["import { useParams } from 'react-router-dom';\nimport React,{useState,useEffect} from 'react';\nimport SingleplaceItem from './SingleplaceItem';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\n\nconst Singleplace = props => {\n  const theaterId = useParams().theaterId;\n  const [LoadedTheatre, setLoadedTheatre] = useState();\n  const [LoadedMovies,setLoadedMovies] = useState();\n  const [isLoading,setisLoading] = useState(false);\n  const [error, setError] = useState();\n    useEffect(() => {\n       const fetchTheatre = async () => {\n        setisLoading(true);\n        try{          \n          const response= await fetch(`http://localhost:5000/api/theatres/${theaterId}`); \n          const responseData = await response.json();\n          if(!response.ok){\n            throw new Error(responseData.message);\n          }\n          setLoadedTheatre(responseData.cinema);\n          setLoadedMovies(responseData.movies);\n        } catch (err) {\n          setError(err.message);\n        }\n        setisLoading(false);\n      };\n  \n      fetchTheatre();\n    },[theaterId]);\n    const errorHandler = () =>{\n      setError=(null);\n    }\n   \n    return (\n      <React.Fragment>\n      {isLoading && (<div><LoadingSpinner /></div>)}\n      {!isLoading && LoadedTheatre && <SingleplaceItem\n  name = {LoadedTheatre.cinema_name} \n  image={LoadedTheatre.image}\n  address = {LoadedTheatre.address}\n  lat = {LoadedTheatre.lat}\n  lng = {LoadedTheatre.lng}\n  movies = {LoadedMovies}/>}\n      </React.Fragment>)\n  \n  };\n\n\nexport default Singleplace;"]},"metadata":{},"sourceType":"module"}