{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/intern/slackapp/src/performance/components/Calculate.js\";\nimport React from 'react';\nimport PerformanceItem from './PerformanceItem';\nimport { differenceInCalendarMonths } from 'date-fns';\nimport moment from 'moment';\n\nconst Calculate = props => {\n  const startOfWeek = moment().startOf('week');\n  console.log(props.items);\n  let dict = {}; // var last = new Date(new Date().getTime() - (4 * 24 * 60 * 60 * 1000  + 11 * 60 * 60 * 1000));\n\n  props.items.map(item => {\n    var last = moment(item.time);\n    console.log(last);\n\n    if (!dict.hasOwnProperty(item.userid) && last.diff(startOfWeek) > 0) {\n      dict[item.userid] = {\n        \"name\": item.name,\n        \"time\": last,\n        \"totaltime\": item.workinghour\n      }; //         dict[item.userid] = {\"name\":item.name,\"status\":[],\"time\":[],\"totaltime\":\"\"};\n    } else {\n      if (last.diff(dict[item.userid].time) > 0) {\n        dict[item.userid].totaltime = item.workinghour;\n      }\n    }\n  }); //     //date has to be in range 5 days\n  //     var datetime = item.time;\n  //     var d = new Date(datetime);\n  //     // console.log(last);\n  //     if(d.getTime() >= last.getTime()){\n  //         // console.log(d);\n  //         //compare the first active and the first away\n  //         //active < away ->  away - active\n  //         //active > away -> away - start + (one more away - start) \n  //         // if(dict[item.userid].status.length >= 1 && item.status === dict[item.userid].status[dict[item.userid].status.length-1]){\n  //         //     dict[item.userid].time[dict[item.userid].time-1] = d;\n  //         // }else{\n  //             dict[item.userid].status.push(item.status);\n  //             dict[item.userid].time.push(d);\n  //         // }\n  //         // dict[item.userid].status.push(item.status);\n  //         // dict\n  //         // if(item.status == \"away\"){\n  //         //     dict[item.userid].away.push(d);\n  //         // }else if(item.status == \"active\"){\n  //         //     dict[item.userid].active.push(d);\n  //         // }\n  //     }\n  // })\n  // //go through the dict again and calculate the total time\n  // Object.keys(dict).forEach(function(key) {\n  //     var status = dict[key].status;\n  //     var time = dict[key].time;\n  //     // if(away.length == 0 || active.length == 0){\n  //     //     if(away.length!=0){\n  //     //         dict[key].totaltime = \"always away\";\n  //     //     }else if(active.length!=0){\n  //     //         dict[key].totaltime = \"always active\";\n  //     //     }\n  //     if(status.length == 1){\n  //         if(status[0] === \"away\"){\n  //             dict[key].totaltime = \"always away\";\n  //         }else{\n  //             dict[key].totaltime = \"always active\";\n  //         }\n  //     }else if(status[0] === \"active\"){\n  //         var totaltime = 0;\n  //         var first = time[0].getTime();\n  //         for(var i = 0; i < time.length;i++){\n  //             if(i % 2 == 0){\n  //               first = time[i].getTime();\n  //             }else{\n  //               totaltime += time[i].getTime() - first;\n  //               first = 0;\n  //             }\n  //         }\n  //         if(first != 0){\n  //             //still have one active left\n  //             totaltime += new Date().getTime() - first;\n  //         }\n  //         dict[key].totaltime = (totaltime / 3600000).toFixed(2).toString() + \"h\";\n  //     }else if(status[0] === \"away\"){\n  //         var totaltime = time[0].getTime() - last.getTime();\n  //         var first = time[1].getTime(); \n  //         for(var i = 1; i < time.length; i++){\n  //            if(i % 2 == 1){\n  //                first = time[i].getTime();\n  //            }else{\n  //                totaltime += time[i].getTime();\n  //                first = 0;\n  //            }\n  //         }\n  //         if(first!=0){\n  //             totaltime += new Date().getTime() - first;\n  //         }\n  //         dict[key].totaltime = (totaltime / 3600000).toFixed(2).toString() + \"h\";\n  //     }\n  // })\n  // }else if (active[0].getTime() < away[0].getTime()){\n  //     var activeindex = 0;\n  //     var awayindex = 0;\n  //     var totaltime = 0;\n  //     while(activeindex < active.length && awayindex < away.length){\n  //         totaltime+= away[awayindex].getTime() - active[activeindex].getTime();\n  //         awayindex++;\n  //         activeindex++;\n  //     }\n  //    if(activeindex < active.length){\n  //        totaltime += new Date().getTime() - active[activeindex].getTime();\n  //    }\n  //    if(awayindex < away.length){\n  //        totaltime += away[awayindex].getTime() - active[active.length-1].getTime();\n  //    }\n  //    dict[key].totaltime = (totaltime / 3600000).toFixed(2).toString() + \"h\";\n  // }else{\n  //active > away -> away - start + (one more away - start) \n  //  var totaltime = 0;\n  //  var activeindex = 0;\n  //  var awayindex = 1;\n  //  console.log(away[0]);\n  //  console.log(last);\n  //  console.log(totaltime/3600000);\n  //  while(activeindex < active.length && awayindex < away.length){\n  //     totaltime+= away[awayindex].getTime() - active[activeindex].getTime();\n  // console.log(totaltime);\n  //     awayindex++;\n  //     activeindex++;\n  //  }\n  //  if(activeindex < active.length){\n  //     totaltime += new Date().getTime() - active[activeindex].getTime();\n  // }\n  // if(awayindex < away.length){\n  //     totaltime += away[awayindex].getTime() - active[active.length-1].getTime();\n  // }\n  // console.log(totaltime);\n  //         dict[key].totaltime = (totaltime / 3600000).toFixed(2).toString() + \"h\";\n  //     }             \n  // });\n  // console.log(dict);\n  // const fetchZapier = async()=>{\n  // const options = {\n  //     method: \"POST\",\n  //     headers: {\"Content-Type\":'application/json'},\n  //     body:JSON.stringify({caculate:`${dict}`})\n  // };\n  // try{\n  //     const response = await fetch(`https://hooks.zapier.com/hooks/catch/2256470/o8atams/`,options);\n  //     const responseData = await response.json();\n  //       if(!response.ok){\n  //         throw new Error(responseData.message);\n  //       }\n  //     } catch (err) {\n  //       console.log(err.message);\n  //     }\n  // }\n  // fetchZapier();\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, Object.entries(dict).map(([key, value]) => React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \" \", value.name, \": \", Math.floor(value.totaltime / 60), \"h\", value.totaltime % 60, \"minutes\"))));\n};\n\nexport default Calculate;","map":{"version":3,"sources":["/Users/liwentian/Desktop/intern/slackapp/src/performance/components/Calculate.js"],"names":["React","PerformanceItem","differenceInCalendarMonths","moment","Calculate","props","startOfWeek","startOf","console","log","items","dict","map","item","last","time","hasOwnProperty","userid","diff","name","workinghour","totaltime","Object","entries","key","value","Math","floor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,0BAAT,QAA2C,UAA3C;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAIA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACvB,QAAMC,WAAW,GAAGH,MAAM,GAAGI,OAAT,CAAiB,MAAjB,CAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,KAAlB;AACA,MAAIC,IAAI,GAAG,EAAX,CAHuB,CAIvB;;AAEAN,EAAAA,KAAK,CAACK,KAAN,CAAYE,GAAZ,CAAgBC,IAAI,IAAE;AAClB,QAAIC,IAAI,GAAGX,MAAM,CAACU,IAAI,CAACE,IAAN,CAAjB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;;AACA,QAAG,CAACH,IAAI,CAACK,cAAL,CAAoBH,IAAI,CAACI,MAAzB,CAAD,IAAqCH,IAAI,CAACI,IAAL,CAAUZ,WAAV,IAAyB,CAAjE,EAAmE;AAC5DK,MAAAA,IAAI,CAACE,IAAI,CAACI,MAAN,CAAJ,GAAoB;AAAC,gBAAOJ,IAAI,CAACM,IAAb;AAAkB,gBAAOL,IAAzB;AAA8B,qBAAYD,IAAI,CAACO;AAA/C,OAApB,CAD4D,CAEvE;AACK,KAHD,MAGK;AACF,UAAGN,IAAI,CAACI,IAAL,CAAUP,IAAI,CAACE,IAAI,CAACI,MAAN,CAAJ,CAAkBF,IAA5B,IAAoC,CAAvC,EAAyC;AACrCJ,QAAAA,IAAI,CAACE,IAAI,CAACI,MAAN,CAAJ,CAAkBI,SAAlB,GAA8BR,IAAI,CAACO,WAAnC;AACH;AACH;AACJ,GAXD,EANuB,CAkBvoBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACFE,MAAM,CAACC,OAAP,CAAeZ,IAAf,EAAqBC,GAArB,CAA0B,CAAC,CAACY,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAKA,KAAK,CAACN,IAAX,QAAmBO,IAAI,CAACC,KAAL,CAAWF,KAAK,CAACJ,SAAN,GAAgB,EAA3B,CAAnB,OAAoDI,KAAK,CAACJ,SAAN,GAAgB,EAApE,YAA5C,CADE,CAFD,CADF;AAYD,CA5KD;;AA8KA,eAAejB,SAAf","sourcesContent":["import React from 'react';\n\nimport PerformanceItem from './PerformanceItem';\nimport { differenceInCalendarMonths } from 'date-fns';\nimport moment from 'moment';\n\n\n\nconst Calculate = props => {\n    const startOfWeek = moment().startOf('week');\n    console.log(props.items);\n    let dict = {};\n    // var last = new Date(new Date().getTime() - (4 * 24 * 60 * 60 * 1000  + 11 * 60 * 60 * 1000));\n    \n    props.items.map(item=>{\n        var last = moment(item.time);\n        console.log(last);\n        if(!dict.hasOwnProperty(item.userid) && last.diff(startOfWeek) > 0){\n               dict[item.userid] = {\"name\":item.name,\"time\":last,\"totaltime\":item.workinghour};\n    //         dict[item.userid] = {\"name\":item.name,\"status\":[],\"time\":[],\"totaltime\":\"\"};\n        }else{\n           if(last.diff(dict[item.userid].time) > 0){\n               dict[item.userid].totaltime = item.workinghour;\n           }\n        }\n    })\n    //     //date has to be in range 5 days\n\n    //     var datetime = item.time;\n\n    //     var d = new Date(datetime);\n    //     // console.log(last);\n    //     if(d.getTime() >= last.getTime()){\n    //         // console.log(d);\n    //         //compare the first active and the first away\n    //         //active < away ->  away - active\n    //         //active > away -> away - start + (one more away - start) \n    //         // if(dict[item.userid].status.length >= 1 && item.status === dict[item.userid].status[dict[item.userid].status.length-1]){\n    //         //     dict[item.userid].time[dict[item.userid].time-1] = d;\n    //         // }else{\n    //             dict[item.userid].status.push(item.status);\n    //             dict[item.userid].time.push(d);\n    //         // }\n    //         // dict[item.userid].status.push(item.status);\n    //         // dict\n    //         // if(item.status == \"away\"){\n    //         //     dict[item.userid].away.push(d);\n    //         // }else if(item.status == \"active\"){\n    //         //     dict[item.userid].active.push(d);\n    //         // }\n    //     }\n      \n       \n    // })\n    \n    // //go through the dict again and calculate the total time\n    // Object.keys(dict).forEach(function(key) {\n    //     var status = dict[key].status;\n    //     var time = dict[key].time;\n    //     // if(away.length == 0 || active.length == 0){\n    //     //     if(away.length!=0){\n    //     //         dict[key].totaltime = \"always away\";\n    //     //     }else if(active.length!=0){\n    //     //         dict[key].totaltime = \"always active\";\n    //     //     }\n    //     if(status.length == 1){\n    //         if(status[0] === \"away\"){\n    //             dict[key].totaltime = \"always away\";\n    //         }else{\n    //             dict[key].totaltime = \"always active\";\n    //         }\n    //     }else if(status[0] === \"active\"){\n    //         var totaltime = 0;\n    //         var first = time[0].getTime();\n      \n    //         for(var i = 0; i < time.length;i++){\n    //             if(i % 2 == 0){\n    //               first = time[i].getTime();\n    //             }else{\n\n    //               totaltime += time[i].getTime() - first;\n               \n    //               first = 0;\n    //             }\n    //         }\n    //         if(first != 0){\n    //             //still have one active left\n    //             totaltime += new Date().getTime() - first;\n    //         }\n    //         dict[key].totaltime = (totaltime / 3600000).toFixed(2).toString() + \"h\";\n    //     }else if(status[0] === \"away\"){\n    //         var totaltime = time[0].getTime() - last.getTime();\n    //         var first = time[1].getTime(); \n    //         for(var i = 1; i < time.length; i++){\n    //            if(i % 2 == 1){\n    //                first = time[i].getTime();\n    //            }else{\n    //                totaltime += time[i].getTime();\n    //                first = 0;\n    //            }\n    //         }\n    //         if(first!=0){\n    //             totaltime += new Date().getTime() - first;\n    //         }\n    //         dict[key].totaltime = (totaltime / 3600000).toFixed(2).toString() + \"h\";\n    //     }\n    // })\n        // }else if (active[0].getTime() < away[0].getTime()){\n        //     var activeindex = 0;\n        //     var awayindex = 0;\n        //     var totaltime = 0;\n        //     while(activeindex < active.length && awayindex < away.length){\n        //         totaltime+= away[awayindex].getTime() - active[activeindex].getTime();\n        //         awayindex++;\n        //         activeindex++;\n        //     }\n        //    if(activeindex < active.length){\n        //        totaltime += new Date().getTime() - active[activeindex].getTime();\n        //    }\n        //    if(awayindex < away.length){\n        //        totaltime += away[awayindex].getTime() - active[active.length-1].getTime();\n        //    }\n        //    dict[key].totaltime = (totaltime / 3600000).toFixed(2).toString() + \"h\";\n        // }else{\n             //active > away -> away - start + (one more away - start) \n            //  var totaltime = 0;\n            //  var activeindex = 0;\n            //  var awayindex = 1;\n            //  console.log(away[0]);\n            //  console.log(last);\n            //  console.log(totaltime/3600000);\n            //  while(activeindex < active.length && awayindex < away.length){\n            //     totaltime+= away[awayindex].getTime() - active[activeindex].getTime();\n                // console.log(totaltime);\n            //     awayindex++;\n            //     activeindex++;\n            //  }\n            //  if(activeindex < active.length){\n            //     totaltime += new Date().getTime() - active[activeindex].getTime();\n            // }\n            // if(awayindex < away.length){\n            //     totaltime += away[awayindex].getTime() - active[active.length-1].getTime();\n            // }\n            // console.log(totaltime);\n    //         dict[key].totaltime = (totaltime / 3600000).toFixed(2).toString() + \"h\";\n    //     }             \n    // });\n    // console.log(dict);\n    // const fetchZapier = async()=>{\n    // const options = {\n    //     method: \"POST\",\n    //     headers: {\"Content-Type\":'application/json'},\n    //     body:JSON.stringify({caculate:`${dict}`})\n    // };\n    // try{\n    //     const response = await fetch(`https://hooks.zapier.com/hooks/catch/2256470/o8atams/`,options);\n    //     const responseData = await response.json();\n    //       if(!response.ok){\n      \n    //         throw new Error(responseData.message);\n    //       }\n   \n    //     } catch (err) {\n    //       console.log(err.message);\n    //     }\n    // }\n    // fetchZapier();\n\n  return (\n    <React.Fragment>\n\n     <div> \n  {Object.entries(dict).map( ([key, value]) => <p> {value.name}: {Math.floor(value.totaltime/60)}h{value.totaltime%60}minutes</p> )}\n    \n     </div>\n     {/* <form onSubmit = {props.submit(dict)}>\n     <button type=\"submit\" style={{marginLeft:\"50%\"}}>Send</button>\n     </form> */}\n     </React.Fragment>\n  ) \n};\n\nexport default Calculate;\n"]},"metadata":{},"sourceType":"module"}