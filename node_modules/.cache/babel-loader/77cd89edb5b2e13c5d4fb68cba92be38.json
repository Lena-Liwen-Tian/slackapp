{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Dropbox/PumpkinMovie1/frontend/src/places/components/Singleplace.js\";\nimport { useParams } from 'react-router-dom';\nimport React, { useState, useEffect } from 'react';\nimport SingleplaceItem from './SingleplaceItem';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\n\nconst Singleplace = props => {\n  const theaterId = useParams().theaterId;\n  const [LoadedTheatre, setLoadedTheatre] = useState();\n  const [LoadedMovies, setLoadedMovies] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  const [have, sethave] = useState(true);\n  useEffect(() => {\n    const fetchTheatre = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/theatres/${theaterId}`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        if (responseData.movies.length === 0) {\n          sethave(false);\n        }\n\n        setLoadedTheatre(responseData.cinema);\n        setLoadedMovies(responseData.movies);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchTheatre();\n  }, [theaterId]);\n\n  const errorHandler = () => {\n    setError = null;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, isLoading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), !isLoading && LoadedTheatre && React.createElement(SingleplaceItem, {\n    name: LoadedTheatre.cinema_name,\n    image: LoadedTheatre.image,\n    address: LoadedTheatre.address,\n    phone: LoadedTheatre.phone,\n    lat: LoadedTheatre.lat,\n    lng: LoadedTheatre.lng,\n    movies: LoadedMovies,\n    imdbID: LoadedMovies.imdbID,\n    have: have,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }));\n};\n\nexport default Singleplace;","map":{"version":3,"sources":["/Users/liwentian/Dropbox/PumpkinMovie1/frontend/src/places/components/Singleplace.js"],"names":["useParams","React","useState","useEffect","SingleplaceItem","useHttpClient","LoadingSpinner","Button","Card","Singleplace","props","theaterId","LoadedTheatre","setLoadedTheatre","LoadedMovies","setLoadedMovies","isLoading","setisLoading","error","setError","have","sethave","fetchTheatre","response","fetch","responseData","json","ok","Error","message","movies","length","cinema","err","errorHandler","cinema_name","image","address","phone","lat","lng","imdbID"],"mappings":";AAAA,SAASA,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,OAAOC,IAAP,MAAiB,yCAAjB;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAMC,SAAS,GAAGX,SAAS,GAAGW,SAA9B;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,EAAlD;AACA,QAAM,CAACY,YAAD,EAAcC,eAAd,IAAiCb,QAAQ,CAAC,EAAD,CAA/C;AACA,QAAM,CAACc,SAAD,EAAWC,YAAX,IAA2Bf,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,EAAlC;AACF,QAAK,CAACkB,IAAD,EAAMC,OAAN,IAAiBnB,QAAQ,CAAC,IAAD,CAA9B;AACIC,EAAAA,SAAS,CAAC,MAAM;AACb,UAAMmB,YAAY,GAAG,YAAY;AAChCL,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACD,cAAMM,QAAQ,GAAE,MAAMC,KAAK,CAAE,sCAAqCb,SAAU,EAAjD,CAA3B;AACA,cAAMc,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AAEA,YAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AACd,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AACD,YAAGJ,YAAY,CAACK,MAAb,CAAoBC,MAApB,KAA+B,CAAlC,EAAqC;AACnCV,UAAAA,OAAO,CAAC,KAAD,CAAP;AACH;;AACCR,QAAAA,gBAAgB,CAACY,YAAY,CAACO,MAAd,CAAhB;AACAjB,QAAAA,eAAe,CAACU,YAAY,CAACK,MAAd,CAAf;AAED,OAbD,CAaE,OAAOG,GAAP,EAAY;AACZd,QAAAA,QAAQ,CAACc,GAAG,CAACJ,OAAL,CAAR;AACD;;AACDZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAGD,KArBA;;AAuBDK,IAAAA,YAAY;AAEb,GA1BQ,EA0BP,CAACX,SAAD,CA1BO,CAAT;;AA2BA,QAAMuB,YAAY,GAAG,MAAK;AACxBf,IAAAA,QAAQ,GAAE,IAAV;AACD,GAFD;;AAIA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCH,SAAS,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,CADf,EAEC,CAACA,SAAD,IAAcJ,aAAd,IAA+B,oBAAC,eAAD;AACpC,IAAA,IAAI,EAAIA,aAAa,CAACuB,WADc;AAEpC,IAAA,KAAK,EAAEvB,aAAa,CAACwB,KAFe;AAGpC,IAAA,OAAO,EAAIxB,aAAa,CAACyB,OAHW;AAIpC,IAAA,KAAK,EAAIzB,aAAa,CAAC0B,KAJa;AAKpC,IAAA,GAAG,EAAI1B,aAAa,CAAC2B,GALe;AAMpC,IAAA,GAAG,EAAI3B,aAAa,CAAC4B,GANe;AAOpC,IAAA,MAAM,EAAI1B,YAP0B;AAQpC,IAAA,MAAM,EAAIA,YAAY,CAAC2B,MARa;AASpC,IAAA,IAAI,EAAIrB,IAT4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFhC,CADF;AAeD,CArDH;;AAwDA,eAAeX,WAAf","sourcesContent":["import { useParams } from 'react-router-dom';\nimport React,{useState,useEffect} from 'react';\nimport SingleplaceItem from './SingleplaceItem';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\n\nconst Singleplace = props => {\n  const theaterId = useParams().theaterId;\n  const [LoadedTheatre, setLoadedTheatre] = useState();\n  const [LoadedMovies,setLoadedMovies] = useState([]);\n  const [isLoading,setisLoading] = useState(false);\n  const [error, setError] = useState();\nconst[have,sethave] = useState(true);\n    useEffect(() => {\n       const fetchTheatre = async () => {\n        setisLoading(true);\n        try{          \n          const response= await fetch(`http://localhost:5000/api/theatres/${theaterId}`); \n          const responseData = await response.json();\n          \n          if(!response.ok){\n            throw new Error(responseData.message);\n          }\n          if(responseData.movies.length === 0) {\n            sethave(false);\n        }\n          setLoadedTheatre(responseData.cinema);\n          setLoadedMovies(responseData.movies);\n          \n        } catch (err) {\n          setError(err.message);\n        }\n        setisLoading(false);\n       \n      \n      };\n  \n      fetchTheatre();\n   \n    },[theaterId]);\n    const errorHandler = () =>{\n      setError=(null);\n    }\n   \n    return (\n      <React.Fragment>\n      {isLoading && (<div><LoadingSpinner /></div>)}\n      {!isLoading && LoadedTheatre && <SingleplaceItem\n  name = {LoadedTheatre.cinema_name} \n  image={LoadedTheatre.image}\n  address = {LoadedTheatre.address}\n  phone = {LoadedTheatre.phone}\n  lat = {LoadedTheatre.lat}\n  lng = {LoadedTheatre.lng}\n  movies = {LoadedMovies}\n  imdbID = {LoadedMovies.imdbID}\n  have = {have}/>}\n      </React.Fragment>)\n  \n  };\n\n\nexport default Singleplace;"]},"metadata":{},"sourceType":"module"}