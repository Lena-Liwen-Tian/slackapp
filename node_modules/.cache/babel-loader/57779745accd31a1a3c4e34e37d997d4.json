{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/frontend/src/movies/pages/Description.js\";\nimport { React, useState, useEffect } from 'react';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useParams } from 'react-router-dom';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport MovieDescription from './MovieDescription';\n\nconst Description = () => {\n  const movieId = useParams().movieId;\n  const [LoadedDescription, setLoadedDescription] = useState();\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  useEffect(() => {\n    const fetchDescription = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/movies/${movieId}`);\n        const responseData = await response.json();\n        console.log(\"sent\");\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedDescription(responseData.movie);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchDescription();\n  }, [movieId]);\n\n  const errorHandler = () => {\n    setError = null;\n  };\n\n  return React.createElement(MovieDescription, {\n    name: LoadedDescription.Title,\n    image: LoadedDescription.Poster,\n    length: LoadedDescription.Runtime,\n    rating: LoadedDescription.Rated,\n    genre: LoadedDescription.Genre,\n    description: LoadedDescription.Plot,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  });\n};\n\nexport default Description;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/frontend/src/movies/pages/Description.js"],"names":["React","useState","useEffect","useHttpClient","LoadingSpinner","useParams","Button","Card","MovieDescription","Description","movieId","LoadedDescription","setLoadedDescription","isLoading","setisLoading","error","setError","fetchDescription","response","fetch","responseData","json","console","log","ok","Error","message","movie","err","errorHandler","Title","Poster","Runtime","Rated","Genre","Plot"],"mappings":";AAAA,SAAQA,KAAR,EAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,OAAOC,gBAAP,MAA4B,oBAA5B;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,OAAO,GAAGL,SAAS,GAAGK,OAA5B;AACA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CX,QAAQ,EAA1D;AACA,QAAM,CAACY,SAAD,EAAWC,YAAX,IAA2Bb,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,EAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACjB,UAAMe,gBAAgB,GAAG,YAAY;AACpCH,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAG;AACD,cAAMI,QAAQ,GAAE,MAAMC,KAAK,CAAE,oCAAmCT,OAAQ,EAA7C,CAA3B;AACA,cAAMU,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AACA,YAAG,CAACL,QAAQ,CAACM,EAAb,EAAgB;AACd,gBAAM,IAAIC,KAAJ,CAAUL,YAAY,CAACM,OAAvB,CAAN;AACD;;AACDd,QAAAA,oBAAoB,CAACQ,YAAY,CAACO,KAAd,CAApB;AAED,OATD,CASE,OAAOC,GAAP,EAAY;AACZZ,QAAAA,QAAQ,CAACY,GAAG,CAACF,OAAL,CAAR;AACD;;AACDZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAhBA;;AAkBDG,IAAAA,gBAAgB;AACf,GApBU,EAoBT,CAACP,OAAD,CApBS,CAAT;;AAsBF,QAAMmB,YAAY,GAAG,MAAK;AAC1Bb,IAAAA,QAAQ,GAAE,IAAV;AACC,GAFD;;AAKE,SACA,oBAAC,gBAAD;AACA,IAAA,IAAI,EAAIL,iBAAiB,CAACmB,KAD1B;AAEA,IAAA,KAAK,EAAEnB,iBAAiB,CAACoB,MAFzB;AAGA,IAAA,MAAM,EAAIpB,iBAAiB,CAACqB,OAH5B;AAIA,IAAA,MAAM,EAAErB,iBAAiB,CAACsB,KAJ1B;AAKA,IAAA,KAAK,EAAEtB,iBAAiB,CAACuB,KALzB;AAMA,IAAA,WAAW,EAAEvB,iBAAiB,CAACwB,IAN/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA;AAUD,CA3CD;;AA8CA,eAAe1B,WAAf","sourcesContent":["import {React,useState,useEffect} from 'react';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useParams } from 'react-router-dom';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport MovieDescription from'./MovieDescription';\n\nconst Description = () => {   \n  const movieId = useParams().movieId;\n  const [LoadedDescription, setLoadedDescription] = useState();\n  const [isLoading,setisLoading] = useState(false);\n  const [error, setError] = useState();\n\n  useEffect(() => {\n const fetchDescription = async () => {\n  setisLoading(true);\n\n  try{          \n    const response= await fetch(`http://localhost:5000/api/movies/${movieId}`); \n    const responseData = await response.json();\n    console.log(\"sent\");\n    if(!response.ok){\n      throw new Error(responseData.message);\n    }\n    setLoadedDescription(responseData.movie);\n    \n  } catch (err) {\n    setError(err.message);\n  }\n  setisLoading(false);\n};\n\nfetchDescription();\n},[movieId]);\n\nconst errorHandler = () =>{\nsetError=(null);\n}\n\n\n  return (\n  <MovieDescription \n  name = {LoadedDescription.Title} \n  image={LoadedDescription.Poster}\n  length = {LoadedDescription.Runtime}\n  rating={LoadedDescription.Rated}\n  genre={LoadedDescription.Genre}\n  description={LoadedDescription.Plot}/>)\n\n\n};\n\n\nexport default Description;"]},"metadata":{},"sourceType":"module"}