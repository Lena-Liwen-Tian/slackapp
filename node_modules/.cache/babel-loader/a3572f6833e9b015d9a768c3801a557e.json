{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/intern/slackapp/src/performance/pages/Performance.js\";\nimport React, { useEffect, useState } from 'react';\nimport PerformanceList from '../components/PerformanceList';\nimport Calculate from '../components/Calculate';\nimport Title from '../components/Title';\n\nconst Performance = () => {\n  const [LoadedPeformance, setLoadedPerformance] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState(); // const[currentPage,setcurrentPage] = useState(1);\n  // const postsPerPage = 20;\n  // const [currentPosts,setcurrentPosts] = useState([]);\n\n  useEffect(() => {\n    const fetchPerformance = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`https://slack-app-ironroots-new.herokuapp.com/api/data`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedPerformance(responseData.data);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n      console.log(\"yes\");\n    };\n\n    fetchPerformance();\n  }, []); // const indexOfLastPosts = currentPage * postsPerPage;\n  //  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n  //  const paginate = pageNumber => setcurrentPage(pageNumber);\n  // useEffect(()=>{\n  //   const updatePosts=()=>{\n  //   setcurrentPosts(LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts))};\n  //   updatePosts()},[LoadedMovies,currentPage,PaginationPage]);\n  // const errorHandler = () =>{\n  //   setError=(null);\n  // }\n\n  const submit = e => {\n    Object.entries(e).map(([key, value]) => fetch(`https://hooks.zapier.com/hooks/catch/2239199/oas9d6e`, {\n      method: 'POST',\n      body: JSON.stringify({\n        value\n      })\n    }));\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, !isLoading && React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), !isLoading && React.createElement(Calculate, {\n    submit: submit,\n    items: LoadedPeformance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), !isLoading && React.createElement(PerformanceList, {\n    items: LoadedPeformance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }));\n};\n\nexport default Performance;","map":{"version":3,"sources":["/Users/liwentian/Desktop/intern/slackapp/src/performance/pages/Performance.js"],"names":["React","useEffect","useState","PerformanceList","Calculate","Title","Performance","LoadedPeformance","setLoadedPerformance","isLoading","setisLoading","error","setError","fetchPerformance","response","fetch","responseData","json","ok","Error","message","data","err","console","log","submit","e","Object","entries","map","key","value","method","body","JSON","stringify"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;AACA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAK,CAACC,gBAAD,EAAkBC,oBAAlB,IAA0CN,QAAQ,CAAC,EAAD,CAAvD;AACA,QAAK,CAACO,SAAD,EAAWC,YAAX,IAA2BR,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAK,CAACS,KAAD,EAAOC,QAAP,IAAmBV,QAAQ,EAAhC,CAHwB,CAIxB;AACA;AACA;;AAEAD,EAAAA,SAAS,CAAC,MAAI;AAEZ,UAAMY,gBAAgB,GAAG,YAAS;AAChCH,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACD,cAAMI,QAAQ,GAAE,MAAMC,KAAK,CAAE,wDAAF,CAA3B;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AACA,YAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AAEd,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AACDZ,QAAAA,oBAAoB,CAACQ,YAAY,CAACK,IAAd,CAApB;AAED,OATD,CASE,OAAOC,GAAP,EAAY;AACZV,QAAAA,QAAQ,CAACU,GAAG,CAACF,OAAL,CAAR;AACD;;AAEDV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD,KAjBD;;AAmBAX,IAAAA,gBAAgB;AACjB,GAtBQ,EAsBP,EAtBO,CAAT,CARwB,CAgCxB;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,QAAMY,MAAM,GAAGC,CAAC,IAAI;AAClBC,IAAAA,MAAM,CAACC,OAAP,CAAeF,CAAf,EAAkBG,GAAlB,CAAuB,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KACvBhB,KAAK,CAAE,sDAAF,EAAwD;AAC3DiB,MAAAA,MAAM,EAAC,MADoD;AAE3DC,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAACJ,QAAAA;AAAD,OAAf;AAFsD,KAAxD,CADL;AAMD,GAPD;;AAWA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,CAACtB,SAAD,IAAc,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHhB,EAME,CAACA,SAAD,IAAc,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAIgB,MAArB;AAA6B,IAAA,KAAK,EAAElB,gBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANhB,EAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPD,EAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARD,EASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATD,EAUE,CAACE,SAAD,IAAc,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAEF,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVhB,CADF;AAYqB,CAnEvB;;AAsEA,eAAeD,WAAf","sourcesContent":["\nimport React, { useEffect,useState } from 'react';\nimport PerformanceList from '../components/PerformanceList';\nimport Calculate from '../components/Calculate';\nimport Title from '../components/Title';\nconst Performance = () => {\n  const[LoadedPeformance,setLoadedPerformance] = useState([]);\n  const[isLoading,setisLoading] = useState(false);\n  const[error,setError] = useState();\n  // const[currentPage,setcurrentPage] = useState(1);\n  // const postsPerPage = 20;\n  // const [currentPosts,setcurrentPosts] = useState([]);\n\n  useEffect(()=>{\n\n    const fetchPerformance = async()=>{\n      setisLoading(true);\n      try{          \n        const response= await fetch(`https://slack-app-ironroots-new.herokuapp.com/api/data`); \n        const responseData = await response.json();\n        if(!response.ok){\n    \n          throw new Error(responseData.message);\n        }\n        setLoadedPerformance(responseData.data);\n \n      } catch (err) {\n        setError(err.message);\n      }\n      \n      setisLoading(false);\n      console.log(\"yes\")\n    };\n\n    fetchPerformance();\n  },[]);\n\n  // const indexOfLastPosts = currentPage * postsPerPage;\n  //  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n  //  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  // useEffect(()=>{\n  //   const updatePosts=()=>{\n  //   setcurrentPosts(LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts))};\n  //   updatePosts()},[LoadedMovies,currentPage,PaginationPage]);\n\n  // const errorHandler = () =>{\n  //   setError=(null);\n  // }\n  const submit = e => {\n    Object.entries(e).map( ([key, value]) => \n    fetch(`https://hooks.zapier.com/hooks/catch/2239199/oas9d6e`,{\n      method:'POST',\n      body:JSON.stringify({value})\n   })\n    )\n  }\n  \n\n\n  return(       \n    <React.Fragment>\n     {/* <PaginationPage postsPerPage={postsPerPage} totalPosts={LoadedMovies.length} paginate={paginate}/> */}\n     {/* isLoading && <div><LoadingSpinner /></div>) */}\n     {!isLoading && <Title/>}\n  \n     \n     {!isLoading && <Calculate submit = {submit} items={LoadedPeformance}/>}\n     <br></br>\n     <hr></hr>\n     <br></br>\n     {!isLoading && <PerformanceList items={LoadedPeformance}/>}\n    </React.Fragment>)}\n\n\nexport default Performance;\n\n\n\n          \n\n\n\n"]},"metadata":{},"sourceType":"module"}