{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/PumpkinMovie1/frontend/src/movies/pages/Description.js\";\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport MovieDescription from './MovieDescription';\n\nconst Description = () => {\n  const movieId = useParams().movieId;\n  const [LoadedDescription, setLoadedDescription] = useState();\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState();\n  useEffect(() => {\n    const fetchDescription = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/movies/${movieId}`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedDescription(responseData.showtimes);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchDescription();\n  }, [movieId]);\n\n  const errorHandler = () => {\n    setError = null;\n  };\n\n  return React.createElement(MovieDescription, {\n    name: movie.name,\n    image: movie.image,\n    length: movie.length,\n    rating: movie.rating,\n    genre: movie.genre,\n    description: movie.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  });\n};\n\nexport default Description;","map":{"version":3,"sources":["/Users/liwentian/Desktop/PumpkinMovie1/frontend/src/movies/pages/Description.js"],"names":["React","useParams","Button","Card","MovieDescription","Description","movieId","LoadedDescription","setLoadedDescription","useState","isLoading","setisLoading","error","setError","useEffect","fetchDescription","response","fetch","responseData","json","ok","Error","message","showtimes","err","errorHandler","movie","name","image","length","rating","genre","description"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,OAAOC,gBAAP,MAA4B,oBAA5B;;AACA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,OAAO,GAAGL,SAAS,GAAGK,OAA5B;AACA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CC,QAAQ,EAA1D;AACA,QAAM,CAACC,SAAD,EAAWC,YAAX,IAA2BF,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,EAAlC;AACAK,EAAAA,SAAS,CAAC,MAAM;AAEjB,UAAMC,gBAAgB,GAAG,YAAY;AACpCJ,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACD,cAAMK,QAAQ,GAAE,MAAMC,KAAK,CAAE,oCAAmCX,OAAQ,EAA7C,CAA3B;AACA,cAAMY,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AACA,YAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AACd,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AACDd,QAAAA,oBAAoB,CAACU,YAAY,CAACK,SAAd,CAApB;AAED,OARD,CAQE,OAAOC,GAAP,EAAY;AACZX,QAAAA,QAAQ,CAACW,GAAG,CAACF,OAAL,CAAR;AACD;;AACDX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAdA;;AAgBDI,IAAAA,gBAAgB;AACf,GAnBU,EAmBT,CAACT,OAAD,CAnBS,CAAT;;AAqBF,QAAMmB,YAAY,GAAG,MAAK;AAC1BZ,IAAAA,QAAQ,GAAE,IAAV;AACC,GAFD;;AAKE,SAAO,oBAAC,gBAAD;AACP,IAAA,IAAI,EAAIa,KAAK,CAACC,IADP;AAEP,IAAA,KAAK,EAAED,KAAK,CAACE,KAFN;AAGP,IAAA,MAAM,EAAIF,KAAK,CAACG,MAHT;AAIP,IAAA,MAAM,EAAEH,KAAK,CAACI,MAJP;AAKP,IAAA,KAAK,EAAEJ,KAAK,CAACK,KALN;AAMP,IAAA,WAAW,EAAEL,KAAK,CAACM,WANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AASD,CAxCD;;AA2CA,eAAe3B,WAAf","sourcesContent":["import React from 'react';\n\nimport { useParams } from 'react-router-dom';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport MovieDescription from'./MovieDescription';\nconst Description = () => {   \n  const movieId = useParams().movieId;\n  const [LoadedDescription, setLoadedDescription] = useState();\n  const [isLoading,setisLoading] = useState(false);\n  const [error, setError] = useState();\n  useEffect(() => {\n\n const fetchDescription = async () => {\n  setisLoading(true);\n  try{          \n    const response= await fetch(`http://localhost:5000/api/movies/${movieId}`); \n    const responseData = await response.json();\n    if(!response.ok){\n      throw new Error(responseData.message);\n    }\n    setLoadedDescription(responseData.showtimes);\n    \n  } catch (err) {\n    setError(err.message);\n  }\n  setisLoading(false);\n};\n\nfetchDescription();\n},[movieId]);\n\nconst errorHandler = () =>{\nsetError=(null);\n}\n\n\n  return <MovieDescription \n  name = {movie.name} \n  image={movie.image}\n  length = {movie.length}\n  rating={movie.rating}\n  genre={movie.genre}\n  description={movie.description}\n  />\n\n};\n\n\nexport default Description;"]},"metadata":{},"sourceType":"module"}