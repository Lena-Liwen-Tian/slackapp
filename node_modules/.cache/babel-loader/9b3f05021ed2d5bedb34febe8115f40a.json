{"ast":null,"code":"var _jsxFileName = \"/Users/liwentian/Desktop/intern/RTMNODE/frontend/src/performance/pages/Performance.js\";\nimport React, { useEffect, useState } from 'react';\nimport MovieList from '../components/PerformanceList';\n\nconst Performance = () => {\n  const [LoadedPeformance, setLoadedPerformance] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [error, setError] = useState(); // const[currentPage,setcurrentPage] = useState(1);\n  // const postsPerPage = 20;\n  // const [currentPosts,setcurrentPosts] = useState([]);\n\n  useEffect(() => {\n    const fetchPerformance = async () => {\n      setisLoading(true);\n\n      try {\n        const response = await fetch(`http://localhost:5000/api/data`);\n        const responseData = await response.json();\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setLoadedPerformance(responseData.data);\n      } catch (err) {\n        setError(err.message);\n      }\n\n      setisLoading(false);\n    };\n\n    fetchPerformance();\n  }, []); // const indexOfLastPosts = currentPage * postsPerPage;\n  //  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n  //  const paginate = pageNumber => setcurrentPage(pageNumber);\n  // useEffect(()=>{\n  //   const updatePosts=()=>{\n  //   setcurrentPosts(LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts))};\n  //   updatePosts()},[LoadedMovies,currentPage,PaginationPage]);\n  // const errorHandler = () =>{\n  //   setError=(null);\n  // }\n\n  return (// <React.Fragment>\n    // <PaginationPage postsPerPage={postsPerPage} totalPosts={LoadedMovies.length} paginate={paginate}/>\n    // isLoading && <div><LoadingSpinner /></div>)\n    !isLoading && LoadedMovies && React.createElement(PerformanceList, {\n      items: LoadedPeformance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })\n  ); // </React.Fragment>)\n};\n\nexport default Performance;","map":{"version":3,"sources":["/Users/liwentian/Desktop/intern/RTMNODE/frontend/src/performance/pages/Performance.js"],"names":["React","useEffect","useState","MovieList","Performance","LoadedPeformance","setLoadedPerformance","isLoading","setisLoading","error","setError","fetchPerformance","response","fetch","responseData","json","ok","Error","message","data","err","LoadedMovies"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,+BAAtB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAK,CAACC,gBAAD,EAAkBC,oBAAlB,IAA0CJ,QAAQ,CAAC,EAAD,CAAvD;AACA,QAAK,CAACK,SAAD,EAAWC,YAAX,IAA2BN,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAK,CAACO,KAAD,EAAOC,QAAP,IAAmBR,QAAQ,EAAhC,CAHwB,CAIxB;AACA;AACA;;AAEAD,EAAAA,SAAS,CAAC,MAAI;AAEZ,UAAMU,gBAAgB,GAAG,YAAS;AAChCH,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAG;AACD,cAAMI,QAAQ,GAAE,MAAMC,KAAK,CAAE,gCAAF,CAA3B;AACA,cAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;;AACA,YAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AAEd,gBAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACD;;AACDZ,QAAAA,oBAAoB,CAACQ,YAAY,CAACK,IAAd,CAApB;AACD,OARD,CAQE,OAAOC,GAAP,EAAY;AACZV,QAAAA,QAAQ,CAACU,GAAG,CAACF,OAAL,CAAR;AACD;;AACDV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAdD;;AAgBAG,IAAAA,gBAAgB;AACjB,GAnBQ,EAmBP,EAnBO,CAAT,CARwB,CA6BxB;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAKA,SACE;AACA;AACA;AACC,KAACJ,SAAD,IAAcc,YAAd,IAA4B,oBAAC,eAAD;AAAiB,MAAA,KAAK,EAAEhB,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJ/B,IA7CwB,CAkDtB;AACD,CAnDH;;AAqDA,eAAeD,WAAf","sourcesContent":["\nimport React, { useEffect,useState } from 'react';\nimport MovieList from '../components/PerformanceList';\n\nconst Performance = () => {\n  const[LoadedPeformance,setLoadedPerformance] = useState([]);\n  const[isLoading,setisLoading] = useState(false);\n  const[error,setError] = useState();\n  // const[currentPage,setcurrentPage] = useState(1);\n  // const postsPerPage = 20;\n  // const [currentPosts,setcurrentPosts] = useState([]);\n\n  useEffect(()=>{\n\n    const fetchPerformance = async()=>{\n      setisLoading(true);\n      try{          \n        const response= await fetch(`http://localhost:5000/api/data`); \n        const responseData = await response.json();\n        if(!response.ok){\n    \n          throw new Error(responseData.message);\n        }\n        setLoadedPerformance(responseData.data);\n      } catch (err) {\n        setError(err.message);\n      }\n      setisLoading(false);\n    };\n\n    fetchPerformance();\n  },[]);\n\n  // const indexOfLastPosts = currentPage * postsPerPage;\n  //  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n  //  const paginate = pageNumber => setcurrentPage(pageNumber);\n\n  // useEffect(()=>{\n  //   const updatePosts=()=>{\n  //   setcurrentPosts(LoadedMovies.slice(indexOfFirstPost,indexOfLastPosts))};\n  //   updatePosts()},[LoadedMovies,currentPage,PaginationPage]);\n\n  // const errorHandler = () =>{\n  //   setError=(null);\n  // }\n   \n  \n\n\n  return(       \n    // <React.Fragment>\n    // <PaginationPage postsPerPage={postsPerPage} totalPosts={LoadedMovies.length} paginate={paginate}/>\n    // isLoading && <div><LoadingSpinner /></div>)\n     !isLoading && LoadedMovies&&<PerformanceList items={LoadedPeformance}/>)\n    // </React.Fragment>)\n  };\n\nexport default Performance;\n\n\n\n          \n\n\n\n"]},"metadata":{},"sourceType":"module"}